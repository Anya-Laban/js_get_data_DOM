{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,EAAc,SAAS,gBAAgB,CAAC,eACxC,EAAoB,SAAS,aAAa,CAAC,qBAC3C,EAAsB,SAAS,aAAa,CAAC,uBAE7C,EAAkB,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,EAAI,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,G,EAAa,MAAM,CAAC,SAAC,CAAA,CAAK,CAAtD,EACE,OAAO,EAAO,CAAA,OAAO,EAAW,WAAW,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,MAAQ,CAAA,CACtE,EAAG,GAQH,SAAS,EAAiB,CAAC,EACzB,OAAO,EAAE,QAAQ,GAAG,OAAO,CAAC,wBAAyB,IACvD,CARA,EAAkB,SAAS,CAAI,GAAoC,MAAA,CAAlC,EAAiB,IAElD,EAAoB,SAAS,CAAG,GAE9B,MAAA,CAFiC,EACjC,KAAK,KAAK,CAAC,EAAkB,EAAY,MAAM","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["'use strict';\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar populations = document.querySelectorAll('.population');\nvar totalPopulationEl = document.querySelector('.total-population');\nvar averagePopulationEl = document.querySelector('.average-population');\nvar totalPopulation = _to_consumable_array(populations).reduce(function(sum, population) {\n    return sum + (Number(population.textContent.split(',').join('')) || 0);\n}, 0);\ntotalPopulationEl.innerHTML = \"\".concat(numberWithCommas(totalPopulation));\naveragePopulationEl.innerHTML = \"\".concat(numberWithCommas(Math.round(totalPopulation / populations.length)));\nfunction numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n//# sourceMappingURL=index.d3747955.js.map\n","'use strict';\n\nconst populations = document.querySelectorAll('.population');\nconst totalPopulationEl = document.querySelector('.total-population');\nconst averagePopulationEl = document.querySelector('.average-population');\n\nconst totalPopulation = [...populations].reduce((sum, population) => {\n  return sum + (Number(population.textContent.split(',').join('')) || 0);\n}, 0);\n\ntotalPopulationEl.innerHTML = `${numberWithCommas(totalPopulation)}`;\n\naveragePopulationEl.innerHTML = `${numberWithCommas(\n  Math.round(totalPopulation / populations.length),\n)}`;\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","populations","document","querySelectorAll","totalPopulationEl","querySelector","averagePopulationEl","totalPopulation","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","reduce","sum","population","Number","textContent","split","join","numberWithCommas","x","replace","innerHTML","concat","Math","round"],"version":3,"file":"index.d3747955.js.map"}